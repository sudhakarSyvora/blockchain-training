{
  "address": "0x79acCCE375Dd19903961e887130407AC268b4A43",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SaleCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "SaleCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SaleUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "createOrUpdateSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketplaceOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sales",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa32165f7a078f5ab21436beefad4d0bae4f0f6331eba6189721be3d9f38acda1",
  "receipt": {
    "to": null,
    "from": "0x641A423E170c8381a0aE0d6D6969f20f6D01f410",
    "contractAddress": "0x79acCCE375Dd19903961e887130407AC268b4A43",
    "transactionIndex": 63,
    "gasUsed": "1517465",
    "logsBloom": "0x
    "blockHash": "0x30fb0452fa37718cd4a127a39ed0786aecd9fd26ed6223d143c71e0420ca0112",
    "transactionHash": "0xa32165f7a078f5ab21436beefad4d0bae4f0f6331eba6189721be3d9f38acda1",
    "logs": [
      {
        "transactionIndex": 63,
        "blockNumber": 5508424,
        "transactionHash": "0xa32165f7a078f5ab21436beefad4d0bae4f0f6331eba6189721be3d9f38acda1",
        "address": "0xC4Fb40dc049945EdB71832e2A6C8eb950De5425F",
        "topics": [
          "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
          "0x00000000000000000000000079accce375dd19903961e887130407ac268b4a43",
          "0x00000000000000000000000079accce375dd19903961e887130407ac268b4a43"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 286,
        "blockHash": "0x30fb0452fa37718cd4a127a39ed0786aecd9fd26ed6223d143c71e0420ca0112"
      }
    ],
    "blockNumber": 5508424,
    "cumulativeGasUsed": "12895060",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC4Fb40dc049945EdB71832e2A6C8eb950De5425F"
  ],
  "numDeployments": 1,
  "solcInputHash": "80dbd599e3a194ddaa296dcbe73ac9c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SaleCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"SaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SaleUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"createOrUpdateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTMarketplace.sol\":\"NFTMarketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/NFTMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract NFTMarketplace {\\n    using Address for address payable;\\n\\n    struct Sale {\\n        address owner;\\n        address nftContract;\\n        uint256 tokenId;\\n        uint256 quantity;\\n        uint256 price;\\n        address paymentToken; \\n    }\\n\\n    mapping(uint256 => Sale) public sales;\\n\\n    address public marketplaceOwner;\\n    uint256 public feePercentage = 55;\\n\\n    event SaleCreated(uint256 saleId, address indexed owner, address indexed nftContract, uint256 indexed tokenId, uint256 quantity, uint256 price, address paymentToken);\\n    event SaleUpdated(uint256 saleId, address indexed owner, uint256 price);\\n    event SaleCompleted(uint256 saleId, address indexed buyer, uint256 price);\\n\\n    constructor(address _nftContract) {\\n        marketplaceOwner = msg.sender;\\n        IERC1155 nftContract = IERC1155(_nftContract);\\n        nftContract.setApprovalForAll(address(this), true);\\n    }\\n\\n    modifier onlyNFTOwner(address _nftContract, uint256 _tokenId) {\\n        address tokenOwner;\\n        if (IERC721(_nftContract).supportsInterface(0x80ac58cd)) {  \\n            tokenOwner = IERC721(_nftContract).ownerOf(_tokenId);\\n        } else {\\n            tokenOwner = IERC1155(_nftContract).balanceOf(msg.sender, _tokenId) > 0 ? msg.sender : address(0);\\n        }\\n        require(tokenOwner == msg.sender, \\\"Only NFT owner can perform this action\\\");\\n        _;\\n    }\\n\\n    function createOrUpdateSale(\\n        address _nftContract,\\n        uint256 _tokenId,\\n        uint256 _quantity,\\n        uint256 _price,\\n        address _paymentToken\\n        \\n    ) external onlyNFTOwner(_nftContract,_tokenId)  {\\n        require(_nftContract != address(0), \\\"Invalid contract address\\\");\\n        require(_quantity > 0, \\\"Quantity should be greater than zero\\\");\\n        require(_price > 0, \\\"Price should be greater than zero\\\");\\n\\n        if (sales[_tokenId].owner == address(0)) {\\n            sales[_tokenId] = Sale(msg.sender, _nftContract, _tokenId, _quantity, _price, _paymentToken);\\n            emit SaleCreated(_tokenId, msg.sender, _nftContract, _tokenId, _quantity, _price, _paymentToken);\\n        } else {\\n            sales[_tokenId].price = _price;\\n            emit SaleUpdated(_tokenId, msg.sender, _price);\\n        }\\n    }\\n\\n    function buy(uint256 _tokenId) external payable {\\n        Sale storage sale = sales[_tokenId];\\n        require(sale.owner != address(0), \\\"Sale does not exist\\\");\\n\\n        uint256 totalPrice = sale.price;\\n        if (sale.paymentToken == address(0)) {\\n            require(msg.value >= totalPrice, \\\"Insufficient ETH sent\\\");\\n        } else {\\n            require(msg.value == 0, \\\"ETH not allowed for this sale\\\");\\n            IERC20 paymentToken = IERC20(sale.paymentToken);\\n            require(paymentToken.transferFrom(msg.sender, address(this), totalPrice), \\\"Payment transfer failed\\\");\\n        }\\n\\n        uint256 feeAmount = totalPrice * feePercentage / 10000;\\n        payable(sale.owner).sendValue(totalPrice - feeAmount); \\n        payable(marketplaceOwner).sendValue(feeAmount); \\n\\n        if (IERC721(sale.nftContract).supportsInterface(0x80ac58cd)) { \\n            IERC721(sale.nftContract).safeTransferFrom(sale.owner, msg.sender, _tokenId);\\n        } else {\\n            IERC1155(sale.nftContract).safeTransferFrom(sale.owner, msg.sender, _tokenId, sale.quantity, \\\"\\\");\\n        }\\n\\n        delete sales[_tokenId];\\n\\n        emit SaleCompleted(_tokenId, msg.sender, totalPrice);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xda6eccb0c0b82e689b93583aafe1be0732de9a6ffe5fa1294573284d9f804e3b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260376002553480156200001657600080fd5b5060405162001b2938038062001b2983398181016040528101906200003c919062000166565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008190508073ffffffffffffffffffffffffffffffffffffffff1663a22cb4653060016040518363ffffffff1660e01b8152600401620000c0929190620001c6565b600060405180830381600087803b158015620000db57600080fd5b505af1158015620000f0573d6000803e3d6000fd5b505050505050620001f3565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200012e8262000101565b9050919050565b620001408162000121565b81146200014c57600080fd5b50565b600081519050620001608162000135565b92915050565b6000602082840312156200017f576200017e620000fc565b5b60006200018f848285016200014f565b91505092915050565b620001a38162000121565b82525050565b60008115159050919050565b620001c081620001a9565b82525050565b6000604082019050620001dd600083018562000198565b620001ec6020830184620001b5565b9392505050565b61192680620002036000396000f3fe60806040526004361061004a5760003560e01c8063650025a01461004f578063a001ecdd1461007a578063a8db657c146100a5578063b5f522f7146100ce578063d96a094a14610110575b600080fd5b34801561005b57600080fd5b5061006461012c565b6040516100719190610f3b565b60405180910390f35b34801561008657600080fd5b5061008f610152565b60405161009c9190610f6f565b60405180910390f35b3480156100b157600080fd5b506100cc60048036038101906100c79190610fe7565b610158565b005b3480156100da57600080fd5b506100f560048036038101906100f09190611062565b610717565b6040516101079695949392919061108f565b60405180910390f35b61012a60048036038101906101259190611062565b6107b3565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b848460008273ffffffffffffffffffffffffffffffffffffffff166301ffc9a76380ac58cd6040518263ffffffff1660e01b81526004016101999190611164565b602060405180830381865afa1580156101b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101da91906111b7565b15610260578273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016102189190610f6f565b602060405180830381865afa158015610235573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025991906111f9565b90506102ee565b60008373ffffffffffffffffffffffffffffffffffffffff1662fdd58e33856040518363ffffffff1660e01b815260040161029c929190611226565b602060405180830381865afa1580156102b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dd9190611264565b116102e95760006102eb565b335b90505b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461035c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035390611314565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16036103cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c290611380565b60405180910390fd5b6000861161040e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040590611412565b60405180910390fd5b60008511610451576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610448906114a4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036106a2576040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1681525060008089815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050868873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fb0a80b8b411d0e9e934eb0cf479e6afa754b6f201b7d96ed8ec110c64b7bcd3f8a8a8a8a60405161069594939291906114c4565b60405180910390a461070d565b84600080898152602001908152602001600020600401819055503373ffffffffffffffffffffffffffffffffffffffff167f14e35e29e973bd87677f47c5604332bf68e1fd726a9778214bb95fdbe265b33b8887604051610704929190611509565b60405180910390a25b5050505050505050565b60006020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b60008060008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361085c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108539061157e565b60405180910390fd5b600081600401549050600073ffffffffffffffffffffffffffffffffffffffff168260050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036109055780341015610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f7906115ea565b60405180910390fd5b610a32565b60003414610948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093f90611656565b60405180910390fd5b60008260050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016109ae93929190611676565b6020604051808303816000875af11580156109cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f191906111b7565b610a30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a27906116f9565b60405180910390fd5b505b600061271060025483610a459190611748565b610a4f91906117b9565b9050610aa98183610a6091906117ea565b8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610e0d90919063ffffffff16565b610af481600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610e0d90919063ffffffff16565b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301ffc9a76380ac58cd6040518263ffffffff1660e01b8152600401610b559190611164565b602060405180830381865afa158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9691906111b7565b15610c57578260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633876040518463ffffffff1660e01b8152600401610c2093929190611676565b600060405180830381600087803b158015610c3a57600080fd5b505af1158015610c4e573d6000803e3d6000fd5b50505050610d15565b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338787600301546040518563ffffffff1660e01b8152600401610ce29493929190611855565b600060405180830381600087803b158015610cfc57600080fd5b505af1158015610d10573d6000803e3d6000fd5b505050505b600080858152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160009055600382016000905560048201600090556005820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550503373ffffffffffffffffffffffffffffffffffffffff167feaa0b3bd2d2b8f1ec500812be411e759ca63e36ab996d88f59d3076f634f095a8584604051610dff929190611509565b60405180910390a250505050565b80471015610e5257306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401610e499190610f3b565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610e78906118db565b60006040518083038185875af1925050503d8060008114610eb5576040519150601f19603f3d011682016040523d82523d6000602084013e610eba565b606091505b5050905080610ef5576040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f2582610efa565b9050919050565b610f3581610f1a565b82525050565b6000602082019050610f506000830184610f2c565b92915050565b6000819050919050565b610f6981610f56565b82525050565b6000602082019050610f846000830184610f60565b92915050565b600080fd5b610f9881610f1a565b8114610fa357600080fd5b50565b600081359050610fb581610f8f565b92915050565b610fc481610f56565b8114610fcf57600080fd5b50565b600081359050610fe181610fbb565b92915050565b600080600080600060a0868803121561100357611002610f8a565b5b600061101188828901610fa6565b955050602061102288828901610fd2565b945050604061103388828901610fd2565b935050606061104488828901610fd2565b925050608061105588828901610fa6565b9150509295509295909350565b60006020828403121561107857611077610f8a565b5b600061108684828501610fd2565b91505092915050565b600060c0820190506110a46000830189610f2c565b6110b16020830188610f2c565b6110be6040830187610f60565b6110cb6060830186610f60565b6110d86080830185610f60565b6110e560a0830184610f2c565b979650505050505050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60008160e01b9050919050565b600061114e611149611144846110f0565b611126565b6110fa565b9050919050565b61115e81611133565b82525050565b60006020820190506111796000830184611155565b92915050565b60008115159050919050565b6111948161117f565b811461119f57600080fd5b50565b6000815190506111b18161118b565b92915050565b6000602082840312156111cd576111cc610f8a565b5b60006111db848285016111a2565b91505092915050565b6000815190506111f381610f8f565b92915050565b60006020828403121561120f5761120e610f8a565b5b600061121d848285016111e4565b91505092915050565b600060408201905061123b6000830185610f2c565b6112486020830184610f60565b9392505050565b60008151905061125e81610fbb565b92915050565b60006020828403121561127a57611279610f8a565b5b60006112888482850161124f565b91505092915050565b600082825260208201905092915050565b7f4f6e6c79204e4654206f776e65722063616e20706572666f726d20746869732060008201527f616374696f6e0000000000000000000000000000000000000000000000000000602082015250565b60006112fe602683611291565b9150611309826112a2565b604082019050919050565b6000602082019050818103600083015261132d816112f1565b9050919050565b7f496e76616c696420636f6e747261637420616464726573730000000000000000600082015250565b600061136a601883611291565b915061137582611334565b602082019050919050565b600060208201905081810360008301526113998161135d565b9050919050565b7f5175616e746974792073686f756c642062652067726561746572207468616e2060008201527f7a65726f00000000000000000000000000000000000000000000000000000000602082015250565b60006113fc602483611291565b9150611407826113a0565b604082019050919050565b6000602082019050818103600083015261142b816113ef565b9050919050565b7f50726963652073686f756c642062652067726561746572207468616e207a657260008201527f6f00000000000000000000000000000000000000000000000000000000000000602082015250565b600061148e602183611291565b915061149982611432565b604082019050919050565b600060208201905081810360008301526114bd81611481565b9050919050565b60006080820190506114d96000830187610f60565b6114e66020830186610f60565b6114f36040830185610f60565b6115006060830184610f2c565b95945050505050565b600060408201905061151e6000830185610f60565b61152b6020830184610f60565b9392505050565b7f53616c6520646f6573206e6f7420657869737400000000000000000000000000600082015250565b6000611568601383611291565b915061157382611532565b602082019050919050565b600060208201905081810360008301526115978161155b565b9050919050565b7f496e73756666696369656e74204554482073656e740000000000000000000000600082015250565b60006115d4601583611291565b91506115df8261159e565b602082019050919050565b60006020820190508181036000830152611603816115c7565b9050919050565b7f455448206e6f7420616c6c6f77656420666f7220746869732073616c65000000600082015250565b6000611640601d83611291565b915061164b8261160a565b602082019050919050565b6000602082019050818103600083015261166f81611633565b9050919050565b600060608201905061168b6000830186610f2c565b6116986020830185610f2c565b6116a56040830184610f60565b949350505050565b7f5061796d656e74207472616e73666572206661696c6564000000000000000000600082015250565b60006116e3601783611291565b91506116ee826116ad565b602082019050919050565b60006020820190508181036000830152611712816116d6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061175382610f56565b915061175e83610f56565b925082820261176c81610f56565b9150828204841483151761178357611782611719565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006117c482610f56565b91506117cf83610f56565b9250826117df576117de61178a565b5b828204905092915050565b60006117f582610f56565b915061180083610f56565b925082820390508181111561181857611817611719565b5b92915050565b600082825260208201905092915050565b50565b600061183f60008361181e565b915061184a8261182f565b600082019050919050565b600060a08201905061186a6000830187610f2c565b6118776020830186610f2c565b6118846040830185610f60565b6118916060830184610f60565b81810360808301526118a281611832565b905095945050505050565b600081905092915050565b60006118c56000836118ad565b91506118d08261182f565b600082019050919050565b60006118e6826118b8565b915081905091905056fea264697066735822122002833e9061582f016f867e598680f5af56caa51ce0acc1e7cd0df2138bca0e6a64736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c8063650025a01461004f578063a001ecdd1461007a578063a8db657c146100a5578063b5f522f7146100ce578063d96a094a14610110575b600080fd5b34801561005b57600080fd5b5061006461012c565b6040516100719190610f3b565b60405180910390f35b34801561008657600080fd5b5061008f610152565b60405161009c9190610f6f565b60405180910390f35b3480156100b157600080fd5b506100cc60048036038101906100c79190610fe7565b610158565b005b3480156100da57600080fd5b506100f560048036038101906100f09190611062565b610717565b6040516101079695949392919061108f565b60405180910390f35b61012a60048036038101906101259190611062565b6107b3565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b848460008273ffffffffffffffffffffffffffffffffffffffff166301ffc9a76380ac58cd6040518263ffffffff1660e01b81526004016101999190611164565b602060405180830381865afa1580156101b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101da91906111b7565b15610260578273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016102189190610f6f565b602060405180830381865afa158015610235573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025991906111f9565b90506102ee565b60008373ffffffffffffffffffffffffffffffffffffffff1662fdd58e33856040518363ffffffff1660e01b815260040161029c929190611226565b602060405180830381865afa1580156102b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dd9190611264565b116102e95760006102eb565b335b90505b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461035c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035390611314565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16036103cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c290611380565b60405180910390fd5b6000861161040e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040590611412565b60405180910390fd5b60008511610451576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610448906114a4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036106a2576040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1681525060008089815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050868873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fb0a80b8b411d0e9e934eb0cf479e6afa754b6f201b7d96ed8ec110c64b7bcd3f8a8a8a8a60405161069594939291906114c4565b60405180910390a461070d565b84600080898152602001908152602001600020600401819055503373ffffffffffffffffffffffffffffffffffffffff167f14e35e29e973bd87677f47c5604332bf68e1fd726a9778214bb95fdbe265b33b8887604051610704929190611509565b60405180910390a25b5050505050505050565b60006020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b60008060008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361085c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108539061157e565b60405180910390fd5b600081600401549050600073ffffffffffffffffffffffffffffffffffffffff168260050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036109055780341015610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f7906115ea565b60405180910390fd5b610a32565b60003414610948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093f90611656565b60405180910390fd5b60008260050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016109ae93929190611676565b6020604051808303816000875af11580156109cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f191906111b7565b610a30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a27906116f9565b60405180910390fd5b505b600061271060025483610a459190611748565b610a4f91906117b9565b9050610aa98183610a6091906117ea565b8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610e0d90919063ffffffff16565b610af481600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610e0d90919063ffffffff16565b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301ffc9a76380ac58cd6040518263ffffffff1660e01b8152600401610b559190611164565b602060405180830381865afa158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9691906111b7565b15610c57578260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633876040518463ffffffff1660e01b8152600401610c2093929190611676565b600060405180830381600087803b158015610c3a57600080fd5b505af1158015610c4e573d6000803e3d6000fd5b50505050610d15565b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338787600301546040518563ffffffff1660e01b8152600401610ce29493929190611855565b600060405180830381600087803b158015610cfc57600080fd5b505af1158015610d10573d6000803e3d6000fd5b505050505b600080858152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160009055600382016000905560048201600090556005820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550503373ffffffffffffffffffffffffffffffffffffffff167feaa0b3bd2d2b8f1ec500812be411e759ca63e36ab996d88f59d3076f634f095a8584604051610dff929190611509565b60405180910390a250505050565b80471015610e5257306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401610e499190610f3b565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610e78906118db565b60006040518083038185875af1925050503d8060008114610eb5576040519150601f19603f3d011682016040523d82523d6000602084013e610eba565b606091505b5050905080610ef5576040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f2582610efa565b9050919050565b610f3581610f1a565b82525050565b6000602082019050610f506000830184610f2c565b92915050565b6000819050919050565b610f6981610f56565b82525050565b6000602082019050610f846000830184610f60565b92915050565b600080fd5b610f9881610f1a565b8114610fa357600080fd5b50565b600081359050610fb581610f8f565b92915050565b610fc481610f56565b8114610fcf57600080fd5b50565b600081359050610fe181610fbb565b92915050565b600080600080600060a0868803121561100357611002610f8a565b5b600061101188828901610fa6565b955050602061102288828901610fd2565b945050604061103388828901610fd2565b935050606061104488828901610fd2565b925050608061105588828901610fa6565b9150509295509295909350565b60006020828403121561107857611077610f8a565b5b600061108684828501610fd2565b91505092915050565b600060c0820190506110a46000830189610f2c565b6110b16020830188610f2c565b6110be6040830187610f60565b6110cb6060830186610f60565b6110d86080830185610f60565b6110e560a0830184610f2c565b979650505050505050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60008160e01b9050919050565b600061114e611149611144846110f0565b611126565b6110fa565b9050919050565b61115e81611133565b82525050565b60006020820190506111796000830184611155565b92915050565b60008115159050919050565b6111948161117f565b811461119f57600080fd5b50565b6000815190506111b18161118b565b92915050565b6000602082840312156111cd576111cc610f8a565b5b60006111db848285016111a2565b91505092915050565b6000815190506111f381610f8f565b92915050565b60006020828403121561120f5761120e610f8a565b5b600061121d848285016111e4565b91505092915050565b600060408201905061123b6000830185610f2c565b6112486020830184610f60565b9392505050565b60008151905061125e81610fbb565b92915050565b60006020828403121561127a57611279610f8a565b5b60006112888482850161124f565b91505092915050565b600082825260208201905092915050565b7f4f6e6c79204e4654206f776e65722063616e20706572666f726d20746869732060008201527f616374696f6e0000000000000000000000000000000000000000000000000000602082015250565b60006112fe602683611291565b9150611309826112a2565b604082019050919050565b6000602082019050818103600083015261132d816112f1565b9050919050565b7f496e76616c696420636f6e747261637420616464726573730000000000000000600082015250565b600061136a601883611291565b915061137582611334565b602082019050919050565b600060208201905081810360008301526113998161135d565b9050919050565b7f5175616e746974792073686f756c642062652067726561746572207468616e2060008201527f7a65726f00000000000000000000000000000000000000000000000000000000602082015250565b60006113fc602483611291565b9150611407826113a0565b604082019050919050565b6000602082019050818103600083015261142b816113ef565b9050919050565b7f50726963652073686f756c642062652067726561746572207468616e207a657260008201527f6f00000000000000000000000000000000000000000000000000000000000000602082015250565b600061148e602183611291565b915061149982611432565b604082019050919050565b600060208201905081810360008301526114bd81611481565b9050919050565b60006080820190506114d96000830187610f60565b6114e66020830186610f60565b6114f36040830185610f60565b6115006060830184610f2c565b95945050505050565b600060408201905061151e6000830185610f60565b61152b6020830184610f60565b9392505050565b7f53616c6520646f6573206e6f7420657869737400000000000000000000000000600082015250565b6000611568601383611291565b915061157382611532565b602082019050919050565b600060208201905081810360008301526115978161155b565b9050919050565b7f496e73756666696369656e74204554482073656e740000000000000000000000600082015250565b60006115d4601583611291565b91506115df8261159e565b602082019050919050565b60006020820190508181036000830152611603816115c7565b9050919050565b7f455448206e6f7420616c6c6f77656420666f7220746869732073616c65000000600082015250565b6000611640601d83611291565b915061164b8261160a565b602082019050919050565b6000602082019050818103600083015261166f81611633565b9050919050565b600060608201905061168b6000830186610f2c565b6116986020830185610f2c565b6116a56040830184610f60565b949350505050565b7f5061796d656e74207472616e73666572206661696c6564000000000000000000600082015250565b60006116e3601783611291565b91506116ee826116ad565b602082019050919050565b60006020820190508181036000830152611712816116d6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061175382610f56565b915061175e83610f56565b925082820261176c81610f56565b9150828204841483151761178357611782611719565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006117c482610f56565b91506117cf83610f56565b9250826117df576117de61178a565b5b828204905092915050565b60006117f582610f56565b915061180083610f56565b925082820390508181111561181857611817611719565b5b92915050565b600082825260208201905092915050565b50565b600061183f60008361181e565b915061184a8261182f565b600082019050919050565b600060a08201905061186a6000830187610f2c565b6118776020830186610f2c565b6118846040830185610f60565b6118916060830184610f60565b81810360808301526118a281611832565b905095945050505050565b600081905092915050565b60006118c56000836118ad565b91506118d08261182f565b600082019050919050565b60006118e6826118b8565b915081905091905056fea264697066735822122002833e9061582f016f867e598680f5af56caa51ce0acc1e7cd0df2138bca0e6a64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3332,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "sales",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Sale)3327_storage)"
      },
      {
        "astId": 3334,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "marketplaceOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3337,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "feePercentage",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Sale)3327_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTMarketplace.Sale)",
        "numberOfBytes": "32",
        "value": "t_struct(Sale)3327_storage"
      },
      "t_struct(Sale)3327_storage": {
        "encoding": "inplace",
        "label": "struct NFTMarketplace.Sale",
        "members": [
          {
            "astId": 3316,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3318,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "nftContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3320,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3322,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "quantity",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3324,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3326,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "paymentToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}