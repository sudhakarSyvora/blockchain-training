{
  "address": "0x6DeDBdbeA5F318c1f71669dA3262feE55439cD3E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SaleCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "SaleCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SaleUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "createOrUpdateSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketplaceOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sales",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf3d99b07053c766750bc2f36e54cf95c287f7c7e3d7b045648b07f93d387fce",
  "receipt": {
    "to": null,
    "from": "0x641A423E170c8381a0aE0d6D6969f20f6D01f410",
    "contractAddress": "0x6DeDBdbeA5F318c1f71669dA3262feE55439cD3E",
    "transactionIndex": 67,
    "gasUsed": "1555515",
    "logsBloom": "0x
    "blockHash": "0x9005700365820b4ec5f4e51bb0a05337138753e38fdf53e6e1e4e02ccda9b98d",
    "transactionHash": "0xcf3d99b07053c766750bc2f36e54cf95c287f7c7e3d7b045648b07f93d387fce",
    "logs": [],
    "blockNumber": 5512235,
    "cumulativeGasUsed": "6328150",
    "status": 1,
    "byzantium": true
  },
  "args": [
    55
  ],
  "numDeployments": 2,
  "solcInputHash": "c2b56897a2460d0d4a43f06444f1742c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SaleCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"SaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SaleUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"createOrUpdateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTMarketplace.sol\":\"NFTMarketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/NFTMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ncontract NFTMarketplace {\\n    struct Sale {\\n        address owner;\\n        address nftContract;\\n        uint256 tokenId;\\n        uint256 quantity;\\n        uint256 price;\\n        address paymentToken;\\n    }\\n\\n    mapping(address => mapping(uint256 => Sale)) public sales;\\n    address public marketplaceOwner;\\n    uint256 public feePercentage;\\n\\n    event SaleCreated(\\n        address indexed owner,\\n        address indexed nftContract,\\n        uint256 indexed tokenId,\\n        uint256 quantity,\\n        uint256 price,\\n        address paymentToken\\n    );\\n    event SaleUpdated(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 price\\n    );\\n    event SaleCompleted(\\n        address indexed buyer,\\n        uint256 indexed tokenId,\\n        uint256 price\\n    );\\n\\n    constructor(uint256 _feePercentage) {\\n        marketplaceOwner = msg.sender;\\n        feePercentage = _feePercentage;\\n    }\\n\\n    modifier onlyNFTOwner(address _nftContract, uint256 _tokenId) {\\n        address tokenOwner;\\n        if (IERC721(_nftContract).supportsInterface(0x80ac58cd)) {\\n            tokenOwner = IERC721(_nftContract).ownerOf(_tokenId);\\n        } else {\\n            tokenOwner = IERC1155(_nftContract).balanceOf(\\n                msg.sender,\\n                _tokenId\\n            ) > 0\\n                ? msg.sender\\n                : address(0);\\n        }\\n        require(\\n            tokenOwner == msg.sender,\\n            \\\"Only NFT owner can perform this action\\\"\\n        );\\n        _;\\n    }\\n\\n    function createOrUpdateSale(\\n        address _nftContract,\\n        uint256 _tokenId,\\n        uint256 _quantity,\\n        uint256 _price,\\n        address _paymentToken\\n    ) external onlyNFTOwner(_nftContract, _tokenId) {\\n        require(_nftContract != address(0), \\\"Invalid contract address\\\");\\n        require(_quantity > 0, \\\"Quantity should be greater than zero\\\");\\n        require(_price > 0, \\\"Price should be greater than zero\\\");\\n\\n        if (sales[_nftContract][_tokenId].owner == address(0)) {\\n            sales[_nftContract][_tokenId] = Sale(\\n                msg.sender,\\n                _nftContract,\\n                _tokenId,\\n                _quantity,\\n                _price,\\n                _paymentToken\\n            );\\n            emit SaleCreated(\\n                msg.sender,\\n                _nftContract,\\n                _tokenId,\\n                _quantity,\\n                _price,\\n                _paymentToken\\n            );\\n        } else {\\n            sales[_nftContract][_tokenId].price = _price;\\n            emit SaleUpdated(msg.sender, _tokenId, _price);\\n        }\\n    }\\n\\n    function buy(address _nftContract, uint256 _tokenId) external payable {\\n        Sale storage sale = sales[_nftContract][_tokenId];\\n        require(sale.owner != address(0), \\\"Sale does not exist\\\");\\n\\n        uint256 totalPrice = sale.price;\\n        uint256 feeAmount = (totalPrice * feePercentage) / 10000;\\n        if (sale.paymentToken == address(0)) {\\n            require(msg.value <= totalPrice, \\\"Insufficient ETH sent\\\");\\n            payable(sale.owner).transfer(totalPrice - feeAmount);\\n        } else {\\n            IERC20 paymentToken = IERC20(sale.paymentToken);\\n            require(\\n                paymentToken.allowance(msg.sender, address(this)) >= totalPrice,\\n                \\\"Allowance not provided\\\"\\n            );\\n            require(\\n                paymentToken.transferFrom(msg.sender, sale.owner, totalPrice),\\n                \\\"Payment transfer failed\\\"\\n            );\\n        }\\n\\n        payable(marketplaceOwner).transfer(feeAmount);\\n        uint256 excessPayment = msg.value - totalPrice;\\n\\n        if (excessPayment > 0) {\\n            payable(msg.sender).transfer(excessPayment);\\n        }\\n        if (\\n            IERC721(sale.nftContract).supportsInterface(\\n                type(IERC721).interfaceId\\n            )\\n        ) {\\n            IERC721(sale.nftContract).safeTransferFrom(\\n                sale.owner,\\n                msg.sender,\\n                _tokenId\\n            );\\n        } else {\\n            IERC1155(sale.nftContract).safeTransferFrom(\\n                sale.owner,\\n                msg.sender,\\n                _tokenId,\\n                sale.quantity,\\n                \\\"\\\"\\n            );\\n        }\\n        sales[_nftContract][_tokenId].owner = msg.sender;\\n\\n        emit SaleCompleted(msg.sender, _tokenId, totalPrice);\\n    }\\n}\\n\",\"keccak256\":\"0xdeb9e62200a3fb0b1a5616891a82d920da1f47cf22c53a963acee595900e6cd4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001b7338038062001b738339818101604052810190620000379190620000c6565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060028190555050620000f8565b600080fd5b6000819050919050565b620000a0816200008b565b8114620000ac57600080fd5b50565b600081519050620000c08162000095565b92915050565b600060208284031215620000df57620000de62000086565b5b6000620000ef84828501620000af565b91505092915050565b611a6b80620001086000396000f3fe60806040526004361061004a5760003560e01c80633a1c83ac1461004f578063650025a014610091578063a001ecdd146100bc578063a8db657c146100e7578063cce7ec1314610110575b600080fd5b34801561005b57600080fd5b50610076600480360381019061007191906110ec565b61012c565b6040516100889695949392919061114a565b60405180910390f35b34801561009d57600080fd5b506100a66101d5565b6040516100b391906111ab565b60405180910390f35b3480156100c857600080fd5b506100d16101fb565b6040516100de91906111c6565b60405180910390f35b3480156100f357600080fd5b5061010e600480360381019061010991906111e1565b610201565b005b61012a600480360381019061012591906110ec565b610874565b005b6000602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b848460008273ffffffffffffffffffffffffffffffffffffffff166301ffc9a76380ac58cd6040518263ffffffff1660e01b815260040161024291906112d0565b602060405180830381865afa15801561025f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102839190611323565b15610309578273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016102c191906111c6565b602060405180830381865afa1580156102de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103029190611365565b9050610397565b60008373ffffffffffffffffffffffffffffffffffffffff1662fdd58e33856040518363ffffffff1660e01b8152600401610345929190611392565b602060405180830381865afa158015610362573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038691906113d0565b11610392576000610394565b335b90505b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fc90611480565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1603610474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046b906114ec565b60405180910390fd5b600086116104b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ae9061157e565b60405180910390fd5b600085116104fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f190611610565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036107c3576040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff168152506000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050868873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5b9f048fbf95f9425ecfccedd962553dfe78613fb5a655748410ec1d8d3e4ff08989896040516107b693929190611630565b60405180910390a461086a565b846000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060040181905550863373ffffffffffffffffffffffffffffffffffffffff167fc72d332b732a892916f5d9fa20b259893c5fba96ddf3a84361b9c0a46319edd68760405161086191906111c6565b60405180910390a35b5050505050505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361095a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610951906116b3565b60405180910390fd5b6000816004015490506000612710600254836109769190611702565b6109809190611773565b9050600073ffffffffffffffffffffffffffffffffffffffff168360050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a985781341115610a1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a14906117f0565b60405180910390fd5b8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8284610a679190611810565b9081150290604051600060405180830381858888f19350505050158015610a92573d6000803e3d6000fd5b50610c64565b60008360050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610afd929190611844565b602060405180830381865afa158015610b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3e91906113d0565b1015610b7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b76906118b9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd338660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff1660e01b8152600401610be0939291906118d9565b6020604051808303816000875af1158015610bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c239190611323565b610c62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c599061195c565b60405180910390fd5b505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ccc573d6000803e3d6000fd5b5060008234610cdb9190611810565b90506000811115610d2e573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d2c573d6000803e3d6000fd5b505b8360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301ffc9a77f80ac58cd000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610dab919061198b565b602060405180830381865afa158015610dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dec9190611323565b15610ead578360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e8560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633886040518463ffffffff1660e01b8152600401610e76939291906118d9565b600060405180830381600087803b158015610e9057600080fd5b505af1158015610ea4573d6000803e3d6000fd5b50505050610f6b565b8360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a8560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338888600301546040518563ffffffff1660e01b8152600401610f3894939291906119dd565b600060405180830381600087803b158015610f5257600080fd5b505af1158015610f66573d6000803e3d6000fd5b505050505b336000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550843373ffffffffffffffffffffffffffffffffffffffff167f7da028d6d698750b8ca8e37c78cf467b925fadc9daec0949597c76dd2dec86538560405161104391906111c6565b60405180910390a3505050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061108382611058565b9050919050565b61109381611078565b811461109e57600080fd5b50565b6000813590506110b08161108a565b92915050565b6000819050919050565b6110c9816110b6565b81146110d457600080fd5b50565b6000813590506110e6816110c0565b92915050565b6000806040838503121561110357611102611053565b5b6000611111858286016110a1565b9250506020611122858286016110d7565b9150509250929050565b61113581611078565b82525050565b611144816110b6565b82525050565b600060c08201905061115f600083018961112c565b61116c602083018861112c565b611179604083018761113b565b611186606083018661113b565b611193608083018561113b565b6111a060a083018461112c565b979650505050505050565b60006020820190506111c0600083018461112c565b92915050565b60006020820190506111db600083018461113b565b92915050565b600080600080600060a086880312156111fd576111fc611053565b5b600061120b888289016110a1565b955050602061121c888289016110d7565b945050604061122d888289016110d7565b935050606061123e888289016110d7565b925050608061124f888289016110a1565b9150509295509295909350565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60008160e01b9050919050565b60006112ba6112b56112b08461125c565b611292565b611266565b9050919050565b6112ca8161129f565b82525050565b60006020820190506112e560008301846112c1565b92915050565b60008115159050919050565b611300816112eb565b811461130b57600080fd5b50565b60008151905061131d816112f7565b92915050565b60006020828403121561133957611338611053565b5b60006113478482850161130e565b91505092915050565b60008151905061135f8161108a565b92915050565b60006020828403121561137b5761137a611053565b5b600061138984828501611350565b91505092915050565b60006040820190506113a7600083018561112c565b6113b4602083018461113b565b9392505050565b6000815190506113ca816110c0565b92915050565b6000602082840312156113e6576113e5611053565b5b60006113f4848285016113bb565b91505092915050565b600082825260208201905092915050565b7f4f6e6c79204e4654206f776e65722063616e20706572666f726d20746869732060008201527f616374696f6e0000000000000000000000000000000000000000000000000000602082015250565b600061146a6026836113fd565b91506114758261140e565b604082019050919050565b600060208201905081810360008301526114998161145d565b9050919050565b7f496e76616c696420636f6e747261637420616464726573730000000000000000600082015250565b60006114d66018836113fd565b91506114e1826114a0565b602082019050919050565b60006020820190508181036000830152611505816114c9565b9050919050565b7f5175616e746974792073686f756c642062652067726561746572207468616e2060008201527f7a65726f00000000000000000000000000000000000000000000000000000000602082015250565b60006115686024836113fd565b91506115738261150c565b604082019050919050565b600060208201905081810360008301526115978161155b565b9050919050565b7f50726963652073686f756c642062652067726561746572207468616e207a657260008201527f6f00000000000000000000000000000000000000000000000000000000000000602082015250565b60006115fa6021836113fd565b91506116058261159e565b604082019050919050565b60006020820190508181036000830152611629816115ed565b9050919050565b6000606082019050611645600083018661113b565b611652602083018561113b565b61165f604083018461112c565b949350505050565b7f53616c6520646f6573206e6f7420657869737400000000000000000000000000600082015250565b600061169d6013836113fd565b91506116a882611667565b602082019050919050565b600060208201905081810360008301526116cc81611690565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061170d826110b6565b9150611718836110b6565b9250828202611726816110b6565b9150828204841483151761173d5761173c6116d3565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061177e826110b6565b9150611789836110b6565b92508261179957611798611744565b5b828204905092915050565b7f496e73756666696369656e74204554482073656e740000000000000000000000600082015250565b60006117da6015836113fd565b91506117e5826117a4565b602082019050919050565b60006020820190508181036000830152611809816117cd565b9050919050565b600061181b826110b6565b9150611826836110b6565b925082820390508181111561183e5761183d6116d3565b5b92915050565b6000604082019050611859600083018561112c565b611866602083018461112c565b9392505050565b7f416c6c6f77616e6365206e6f742070726f766964656400000000000000000000600082015250565b60006118a36016836113fd565b91506118ae8261186d565b602082019050919050565b600060208201905081810360008301526118d281611896565b9050919050565b60006060820190506118ee600083018661112c565b6118fb602083018561112c565b611908604083018461113b565b949350505050565b7f5061796d656e74207472616e73666572206661696c6564000000000000000000600082015250565b60006119466017836113fd565b915061195182611910565b602082019050919050565b6000602082019050818103600083015261197581611939565b9050919050565b61198581611266565b82525050565b60006020820190506119a0600083018461197c565b92915050565b600082825260208201905092915050565b50565b60006119c76000836119a6565b91506119d2826119b7565b600082019050919050565b600060a0820190506119f2600083018761112c565b6119ff602083018661112c565b611a0c604083018561113b565b611a19606083018461113b565b8181036080830152611a2a816119ba565b90509594505050505056fea2646970667358221220b4f5e9f3c59ef91987ff3add1cc018acb68b9b1a2d65b1dba737b39df420c69d64736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c80633a1c83ac1461004f578063650025a014610091578063a001ecdd146100bc578063a8db657c146100e7578063cce7ec1314610110575b600080fd5b34801561005b57600080fd5b50610076600480360381019061007191906110ec565b61012c565b6040516100889695949392919061114a565b60405180910390f35b34801561009d57600080fd5b506100a66101d5565b6040516100b391906111ab565b60405180910390f35b3480156100c857600080fd5b506100d16101fb565b6040516100de91906111c6565b60405180910390f35b3480156100f357600080fd5b5061010e600480360381019061010991906111e1565b610201565b005b61012a600480360381019061012591906110ec565b610874565b005b6000602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b848460008273ffffffffffffffffffffffffffffffffffffffff166301ffc9a76380ac58cd6040518263ffffffff1660e01b815260040161024291906112d0565b602060405180830381865afa15801561025f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102839190611323565b15610309578273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016102c191906111c6565b602060405180830381865afa1580156102de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103029190611365565b9050610397565b60008373ffffffffffffffffffffffffffffffffffffffff1662fdd58e33856040518363ffffffff1660e01b8152600401610345929190611392565b602060405180830381865afa158015610362573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038691906113d0565b11610392576000610394565b335b90505b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fc90611480565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1603610474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046b906114ec565b60405180910390fd5b600086116104b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ae9061157e565b60405180910390fd5b600085116104fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f190611610565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036107c3576040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff168152506000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050868873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5b9f048fbf95f9425ecfccedd962553dfe78613fb5a655748410ec1d8d3e4ff08989896040516107b693929190611630565b60405180910390a461086a565b846000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060040181905550863373ffffffffffffffffffffffffffffffffffffffff167fc72d332b732a892916f5d9fa20b259893c5fba96ddf3a84361b9c0a46319edd68760405161086191906111c6565b60405180910390a35b5050505050505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361095a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610951906116b3565b60405180910390fd5b6000816004015490506000612710600254836109769190611702565b6109809190611773565b9050600073ffffffffffffffffffffffffffffffffffffffff168360050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a985781341115610a1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a14906117f0565b60405180910390fd5b8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8284610a679190611810565b9081150290604051600060405180830381858888f19350505050158015610a92573d6000803e3d6000fd5b50610c64565b60008360050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610afd929190611844565b602060405180830381865afa158015610b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3e91906113d0565b1015610b7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b76906118b9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd338660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff1660e01b8152600401610be0939291906118d9565b6020604051808303816000875af1158015610bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c239190611323565b610c62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c599061195c565b60405180910390fd5b505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ccc573d6000803e3d6000fd5b5060008234610cdb9190611810565b90506000811115610d2e573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d2c573d6000803e3d6000fd5b505b8360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301ffc9a77f80ac58cd000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610dab919061198b565b602060405180830381865afa158015610dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dec9190611323565b15610ead578360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e8560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633886040518463ffffffff1660e01b8152600401610e76939291906118d9565b600060405180830381600087803b158015610e9057600080fd5b505af1158015610ea4573d6000803e3d6000fd5b50505050610f6b565b8360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a8560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338888600301546040518563ffffffff1660e01b8152600401610f3894939291906119dd565b600060405180830381600087803b158015610f5257600080fd5b505af1158015610f66573d6000803e3d6000fd5b505050505b336000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550843373ffffffffffffffffffffffffffffffffffffffff167f7da028d6d698750b8ca8e37c78cf467b925fadc9daec0949597c76dd2dec86538560405161104391906111c6565b60405180910390a3505050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061108382611058565b9050919050565b61109381611078565b811461109e57600080fd5b50565b6000813590506110b08161108a565b92915050565b6000819050919050565b6110c9816110b6565b81146110d457600080fd5b50565b6000813590506110e6816110c0565b92915050565b6000806040838503121561110357611102611053565b5b6000611111858286016110a1565b9250506020611122858286016110d7565b9150509250929050565b61113581611078565b82525050565b611144816110b6565b82525050565b600060c08201905061115f600083018961112c565b61116c602083018861112c565b611179604083018761113b565b611186606083018661113b565b611193608083018561113b565b6111a060a083018461112c565b979650505050505050565b60006020820190506111c0600083018461112c565b92915050565b60006020820190506111db600083018461113b565b92915050565b600080600080600060a086880312156111fd576111fc611053565b5b600061120b888289016110a1565b955050602061121c888289016110d7565b945050604061122d888289016110d7565b935050606061123e888289016110d7565b925050608061124f888289016110a1565b9150509295509295909350565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60008160e01b9050919050565b60006112ba6112b56112b08461125c565b611292565b611266565b9050919050565b6112ca8161129f565b82525050565b60006020820190506112e560008301846112c1565b92915050565b60008115159050919050565b611300816112eb565b811461130b57600080fd5b50565b60008151905061131d816112f7565b92915050565b60006020828403121561133957611338611053565b5b60006113478482850161130e565b91505092915050565b60008151905061135f8161108a565b92915050565b60006020828403121561137b5761137a611053565b5b600061138984828501611350565b91505092915050565b60006040820190506113a7600083018561112c565b6113b4602083018461113b565b9392505050565b6000815190506113ca816110c0565b92915050565b6000602082840312156113e6576113e5611053565b5b60006113f4848285016113bb565b91505092915050565b600082825260208201905092915050565b7f4f6e6c79204e4654206f776e65722063616e20706572666f726d20746869732060008201527f616374696f6e0000000000000000000000000000000000000000000000000000602082015250565b600061146a6026836113fd565b91506114758261140e565b604082019050919050565b600060208201905081810360008301526114998161145d565b9050919050565b7f496e76616c696420636f6e747261637420616464726573730000000000000000600082015250565b60006114d66018836113fd565b91506114e1826114a0565b602082019050919050565b60006020820190508181036000830152611505816114c9565b9050919050565b7f5175616e746974792073686f756c642062652067726561746572207468616e2060008201527f7a65726f00000000000000000000000000000000000000000000000000000000602082015250565b60006115686024836113fd565b91506115738261150c565b604082019050919050565b600060208201905081810360008301526115978161155b565b9050919050565b7f50726963652073686f756c642062652067726561746572207468616e207a657260008201527f6f00000000000000000000000000000000000000000000000000000000000000602082015250565b60006115fa6021836113fd565b91506116058261159e565b604082019050919050565b60006020820190508181036000830152611629816115ed565b9050919050565b6000606082019050611645600083018661113b565b611652602083018561113b565b61165f604083018461112c565b949350505050565b7f53616c6520646f6573206e6f7420657869737400000000000000000000000000600082015250565b600061169d6013836113fd565b91506116a882611667565b602082019050919050565b600060208201905081810360008301526116cc81611690565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061170d826110b6565b9150611718836110b6565b9250828202611726816110b6565b9150828204841483151761173d5761173c6116d3565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061177e826110b6565b9150611789836110b6565b92508261179957611798611744565b5b828204905092915050565b7f496e73756666696369656e74204554482073656e740000000000000000000000600082015250565b60006117da6015836113fd565b91506117e5826117a4565b602082019050919050565b60006020820190508181036000830152611809816117cd565b9050919050565b600061181b826110b6565b9150611826836110b6565b925082820390508181111561183e5761183d6116d3565b5b92915050565b6000604082019050611859600083018561112c565b611866602083018461112c565b9392505050565b7f416c6c6f77616e6365206e6f742070726f766964656400000000000000000000600082015250565b60006118a36016836113fd565b91506118ae8261186d565b602082019050919050565b600060208201905081810360008301526118d281611896565b9050919050565b60006060820190506118ee600083018661112c565b6118fb602083018561112c565b611908604083018461113b565b949350505050565b7f5061796d656e74207472616e73666572206661696c6564000000000000000000600082015250565b60006119466017836113fd565b915061195182611910565b602082019050919050565b6000602082019050818103600083015261197581611939565b9050919050565b61198581611266565b82525050565b60006020820190506119a0600083018461197c565b92915050565b600082825260208201905092915050565b50565b60006119c76000836119a6565b91506119d2826119b7565b600082019050919050565b600060a0820190506119f2600083018761112c565b6119ff602083018661112c565b611a0c604083018561113b565b611a19606083018461113b565b8181036080830152611a2a816119ba565b90509594505050505056fea2646970667358221220b4f5e9f3c59ef91987ff3add1cc018acb68b9b1a2d65b1dba737b39df420c69d64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3001,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "sales",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Sale)2994_storage))"
      },
      {
        "astId": 3003,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "marketplaceOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3005,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "feePercentage",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Sale)2994_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NFTMarketplace.Sale))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Sale)2994_storage)"
      },
      "t_mapping(t_uint256,t_struct(Sale)2994_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTMarketplace.Sale)",
        "numberOfBytes": "32",
        "value": "t_struct(Sale)2994_storage"
      },
      "t_struct(Sale)2994_storage": {
        "encoding": "inplace",
        "label": "struct NFTMarketplace.Sale",
        "members": [
          {
            "astId": 2983,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2985,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "nftContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2987,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2989,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "quantity",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2991,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2993,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "paymentToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}